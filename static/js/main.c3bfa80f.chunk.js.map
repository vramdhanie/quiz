{"version":3,"sources":["images/logo.png","store/system/types.ts","utils/ControlledRoute/controlledRoute.tsx","styles/themes.ts","common/buttons.tsx","components/ModeSwitcher/modeSwitcher.tsx","store/system/actions.ts","store/quiz/types.ts","store/quiz/actions.ts","components/DifficultySwitcher/difficultySwitcher.tsx","components/Settings/settings.tsx","components/Header/header.tsx","components/Footer/footer.tsx","components/Home/home.tsx","components/Question/question.tsx","components/Quiz/quiz.tsx","components/Result/result.tsx","components/Score/score.tsx","components/App/app.tsx","store/system/reducers.ts","store/quiz/reducers.ts","store/sagas/index.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","Phase","Mode","connect","state","questions","quiz","children","rest","render","location","length","to","pathname","PHASE_TRANSITION","CHANGE_MODE","lightTheme","all","white","black","mainTransition","mainSpacing","lightShadow","darkShadow","lightBorder","primary","main","light","dark","text","secondary","darkTheme","styled","baseStyled","PrimaryButton","div","props","theme","WhiteButton","ModeDiv","LabelDiv","ControlDiv","StyledModeSwitcher","className","mode","changeMode","onClick","LIGHT","system","type","SET_QUESTIONS","FETCH_QUESTIONS","CLEAR_QUESTIONS","INCREMENT_CURRENT","UPDATE_DIFFICULTY","UPDATE_SCORE","ADD_ANSWER","clearQuestions","DifficultyDiv","ButtonNote","DifficultySwitcher","difficulty","updateDifficulty","useState","diff","setDiff","min","max","step","value","onChange","e","target","payload","MenuIcon","FullMenu","CloseButton","isOpen","setIsOpen","ThemedHeader","header","src","logo","alt","ThemedFooter","footer","ThemedSection","section","BannerStatement","h3","QuestionContainer","CategoryDiv","QuestionDiv","BooleanButton","StyledQuestion","question","addAnswer","incrementCurrent","currentQuestion","maxQuestions","answered","setAnswered","history","useHistory","useEffect","checkAnswer","ans","push","category","dangerouslySetInnerHTML","__html","disabled","answer","QuestionNumber","h2","DiffDiv","ProgressBar","completed","StyledQuiz","loading","fetchQuestions","correctAnswer","givenAnswer","correct","toString","StyledScore","answers","total","setTotal","right","map","index","correct_answer","toLowerCase","filter","key","ThemedMain","StyledApp","path","exact","initialState","phase","NEW","score","actionWatcher","rootSaga","select","fetch","then","response","json","put","results","takeLatest","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","action","DARK","Boolean","window","hostname","match","store","middlewares","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","run","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c3bfa80f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.49e22eaf.png\";","export enum Phase {\n  NEW,\n  LOADING,\n  PLAYING,\n  DONE\n}\n\nexport enum Mode {\n  LIGHT = \"Light Mode\",\n  DARK = \"Dark Mode\"\n}\n\nexport interface SystemState {\n  phase: Phase;\n  mode: Mode;\n}\n\nexport const PHASE_TRANSITION = \"PHASE_TRANSITION\";\nexport const CHANGE_MODE = \"CHANGE_MODE\";\n\ninterface PhaseTransitionAction {\n  type: typeof PHASE_TRANSITION;\n  payload: SystemState;\n}\n\ninterface ChangeModeAction {\n  type: typeof CHANGE_MODE;\n}\n\nexport type SystemActionTypes = PhaseTransitionAction | ChangeModeAction;\n","import React from \"react\";\nimport { StyledProps } from \"../interfaces\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store/index\";\nimport { Question as QuestionInterface } from \"../../store/quiz/types\";\n\ninterface ControlledRouteProps extends StyledProps {\n  questions: QuestionInterface[];\n  path: string;\n  children?: any;\n}\n\nexport const ControlledRoute: React.FC<ControlledRouteProps> = ({\n  children,\n  questions,\n  ...rest\n}) => {\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        questions.length > 0 ? children : <Redirect to={{ pathname: \"/\" }} />\n      }\n    />\n  );\n};\n\nconst mapStateToProps = (state: AppState) => ({\n  questions: state.quiz.questions\n});\n\nexport default connect(mapStateToProps)(ControlledRoute);\n","import baseStyled, { ThemedStyledInterface } from \"styled-components\";\n\nexport const lightTheme = {\n  all: {\n    white: \"#FFFFFF\",\n    black: \"#000000\",\n    mainTransition: \"all 0.3s linear\",\n    mainSpacing: \"4px\",\n    lightShadow: \"2px 5px 3px 0px rgba(0, 0, 0, 0.5)\",\n    darkShadow: \"4px 10px 5px 0px rgba(0, 0, 0, 0.5)\",\n    lightBorder: \"0 0 2px 0px rgba(0, 0, 0, 0.2)\"\n  },\n  primary: {\n    main: \"#009688\",\n    light: \"#52c7b8\",\n    dark: \"#00675b\",\n    text: \"#000000\"\n  },\n  secondary: {\n    main: \"#FF6E40\",\n    light: \"#FFA06d\",\n    dark: \"#C53d13\",\n    text: \"#000000\"\n  }\n};\n\nexport const darkTheme: Theme = {\n  all: {\n    ...lightTheme.all\n  },\n  primary: {\n    main: \"#37474F\",\n    light: \"#62727B\",\n    dark: \"#102027\",\n    text: \"#FFFFFF\"\n  },\n  secondary: {\n    main: \"#2196F3\",\n    light: \"#6EC6FF\",\n    dark: \"#0069C0\",\n    text: \"#FFFFFF\"\n  }\n};\n\nexport type Theme = typeof lightTheme;\nexport const styled = baseStyled as ThemedStyledInterface<Theme>;\n","import { styled } from \"../styles/themes\";\n\nexport const PrimaryButton = styled.div`\n  background: ${props => props.theme.primary.dark};\n  color: ${props => props.theme.all.white};\n  width: 150px;\n  padding: 10px;\n  border-radius: 6px;\n\n  border: 2px solid ${props => props.theme.primary.main};\n  text-transform: uppercase;\n  text-decoration: none;\n  letter-spacing: ${props => props.theme.all.mainSpacing};\n\n  padding: 0.9rem 1.6rem;\n  display: inline-block;\n  transition: ${props => props.theme.all.mainTransition};\n  cursor: pointer;\n  &:hover {\n    background: transparent;\n    color: ${props => props.theme.primary.dark};\n  }\n`;\n\nexport const WhiteButton = styled.div`\n  text-transform: uppercase;\n  text-decoration: none;\n  letter-spacing: ${props => props.theme.all.mainSpacing};\n  color: ${props => props.theme.all.white};\n  border: 2px solid ${props => props.theme.primary.text};\n  padding: 0.9rem 1.6rem;\n  display: inline-block;\n  transition: ${props => props.theme.all.mainTransition};\n  cursor: pointer;\n  &:hover {\n    background: ${props => props.theme.primary.text};\n    color: ${props => props.theme.primary.main};\n  }\n`;\n","import React from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { AppProps } from \"../../utils/interfaces\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store\";\nimport { PrimaryButton } from \"../../common/buttons\";\nimport { changeMode } from \"../../store/system/actions\";\nimport { Mode } from \"../../store/system/types\";\nimport { MdWbSunny } from \"react-icons/md\";\nimport { FaMoon } from \"react-icons/fa\";\n\nconst ModeDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 5px;\n  border-bottom: solid 1px ${props => props.theme.secondary.main};\n`;\n\nconst LabelDiv = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ControlDiv = styled.div`\n  flex: 3;\n`;\n\ninterface ModeSwitcherInterface extends AppProps {\n  changeMode: typeof changeMode;\n}\n\nconst ModeSwitcher: React.FC<ModeSwitcherInterface> = ({\n  className,\n  mode,\n  changeMode\n}) => {\n  return (\n    <ModeDiv>\n      <LabelDiv>Mode</LabelDiv>\n      <ControlDiv>\n        <PrimaryButton onClick={() => changeMode()}>\n          {mode === Mode.LIGHT ? <MdWbSunny /> : <FaMoon />}\n        </PrimaryButton>\n      </ControlDiv>\n    </ModeDiv>\n  );\n};\n\nexport const StyledModeSwitcher = styled(ModeSwitcher)``;\n\nconst mapStateToProps = (state: AppState) => ({\n  mode: state.system.mode\n});\n\nexport default connect(mapStateToProps, { changeMode })(StyledModeSwitcher);\n","import { SystemState, PHASE_TRANSITION, CHANGE_MODE } from \"./types\";\n\nexport function phaseTransition(newPhase: SystemState) {\n  return {\n    type: PHASE_TRANSITION,\n    payload: newPhase\n  };\n}\n\nexport function changeMode() {\n  return {\n    type: CHANGE_MODE\n  };\n}\n","export interface Question {\n  category: string;\n  type: string;\n  difficulty: string;\n  question: string;\n  correct_answer: string;\n  incorrect_answers: [string];\n}\n\nexport interface QuestionState {\n  questions: Question[];\n  answers: boolean[];\n  difficulty: string;\n  score: number;\n  loading: boolean;\n  currentQuestion: number;\n  maxQuestions: number;\n}\n\nexport const SET_QUESTIONS = \"SET_QUESTIONS\";\nexport const FETCH_QUESTIONS = \"FETCH_QUESTIONS\";\nexport const CLEAR_QUESTIONS = \"CLEAR_QUESTIONS\";\nexport const INCREMENT_CURRENT = \"INCREMENT_CURRENT\";\nexport const UPDATE_DIFFICULTY = \"UPDATE_DIFFICULTY\";\nexport const UPDATE_SCORE = \"UPDATE_SCORE\";\nexport const ADD_ANSWER = \"ADD_ANSWER\";\n\ninterface FetchQuestionsAction {\n  type: typeof FETCH_QUESTIONS;\n}\n\ninterface SetQuestionsAction {\n  type: typeof SET_QUESTIONS;\n  payload: Question[];\n}\n\ninterface ClearQuestionsAction {\n  type: typeof CLEAR_QUESTIONS;\n}\n\ninterface IncrementCurrent {\n  type: typeof INCREMENT_CURRENT;\n}\n\ninterface UpdateDifficultyAction {\n  type: typeof UPDATE_DIFFICULTY;\n  payload: string;\n}\n\ninterface UpdateScoreAction {\n  type: typeof UPDATE_SCORE;\n  payload: number;\n}\n\ninterface AddAnswerAction {\n  type: typeof ADD_ANSWER;\n  payload: boolean;\n}\n\nexport type QuizActionTypes =\n  | SetQuestionsAction\n  | FetchQuestionsAction\n  | ClearQuestionsAction\n  | UpdateDifficultyAction\n  | UpdateScoreAction\n  | IncrementCurrent\n  | AddAnswerAction;\n","import {\n  Question,\n  SET_QUESTIONS,\n  FETCH_QUESTIONS,\n  UPDATE_DIFFICULTY,\n  UPDATE_SCORE,\n  CLEAR_QUESTIONS,\n  INCREMENT_CURRENT,\n  ADD_ANSWER\n} from \"./types\";\n\nexport function fetchQuestions() {\n  return {\n    type: FETCH_QUESTIONS\n  };\n}\n\nexport function setQuestions(questions: Question[]) {\n  return {\n    type: SET_QUESTIONS,\n    payload: questions\n  };\n}\n\nexport function updateDifficulty(difficulty: string) {\n  return {\n    type: UPDATE_DIFFICULTY,\n    payload: difficulty\n  };\n}\n\nexport function updateScore(score: number) {\n  return {\n    type: UPDATE_SCORE,\n    payload: score\n  };\n}\n\nexport function clearQuestions() {\n  return {\n    type: CLEAR_QUESTIONS\n  };\n}\n\nexport function incrementCurrent() {\n  return {\n    type: INCREMENT_CURRENT\n  };\n}\n\nexport function addAnswer(answer: boolean) {\n  return {\n    type: ADD_ANSWER,\n    payload: answer\n  };\n}\n","import React, { useState } from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store\";\nimport { PrimaryButton } from \"../../common/buttons\";\nimport { updateDifficulty, clearQuestions } from \"../../store/quiz/actions\";\n\nconst DifficultyDiv = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 5px;\n  border-bottom: solid 1px ${props => props.theme.secondary.main};\n`;\n\nconst LabelDiv = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst ControlDiv = styled.div`\n  flex: 3;\n`;\n\nconst ButtonNote = styled.div`\n  font-size: 0.8rem;\n  opacity: 0.6;\n  text-transform: none;\n`;\n\ninterface DifficultySwitcherInterface extends StyledProps {\n  updateDifficulty: typeof updateDifficulty;\n  clearQuestions: typeof clearQuestions;\n  difficulty: string;\n}\n\nconst DifficultySwitcher: React.FC<DifficultySwitcherInterface> = ({\n  className,\n  difficulty,\n  updateDifficulty,\n  clearQuestions\n}) => {\n  const [diff, setDiff] = useState(\n    difficulty === \"easy\" ? 0 : difficulty === \"medium\" ? 1 : 2\n  );\n\n  const changeDifficulty = () => {\n    updateDifficulty(diff === 0 ? \"easy\" : diff === 1 ? \"medium\" : \"hard\");\n    clearQuestions();\n  };\n\n  return (\n    <DifficultyDiv>\n      <LabelDiv>Difficulty</LabelDiv>\n      <ControlDiv>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"2\"\n          step=\"1\"\n          value={diff}\n          onChange={e => setDiff(+e.target.value)}\n        />\n        <PrimaryButton onClick={() => changeDifficulty()}>\n          <div>{diff === 0 ? \"easy\" : diff === 1 ? \"medium\" : \"hard\"}</div>\n          <ButtonNote>(Restarts Quiz)</ButtonNote>\n        </PrimaryButton>\n      </ControlDiv>\n    </DifficultyDiv>\n  );\n};\n\nexport const StyledDifficultySwitcher = styled(DifficultySwitcher)``;\n\nconst mapStateToProps = (state: AppState) => ({\n  difficulty: state.quiz.difficulty\n});\n\nexport default connect(mapStateToProps, { updateDifficulty, clearQuestions })(\n  DifficultySwitcher\n);\n","import React, { useState } from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport { MdMoreVert } from \"react-icons/md\";\nimport ModeSwitcher from \"../ModeSwitcher/modeSwitcher\";\nimport DifficultySwitcher from \"../DifficultySwitcher/difficultySwitcher\";\n\nconst MenuIcon = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 1.5rem;\n  color: ${props => props.theme.primary.dark};\n  cursor: pointer;\n  transition: ${props => props.theme.all.mainTransition};\n  &:hover {\n    color: ${props => props.theme.primary.main};\n    transform: translateY(-5px);\n  }\n`;\n\nconst FullMenu = styled.div`\n  width: 300px;\n  height: 200px;\n  background: ${props => props.theme.secondary.light};\n  border: solid 1px ${props => props.theme.secondary.dark};\n  padding-top: 20px;\n  position: absolute;\n  top: 100%;\n  right: 10px;\n  border-radius: 6px;\n  box-shadow: ${props => props.theme.all.darkShadow};\n  transition: ${props => props.theme.all.mainTransition};\n  z-index: 99;\n  &::before {\n    position: absolute;\n    top: -20px;\n    right: 10%;\n    width: 0;\n    height: 0;\n    border-top: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-left: 10px solid transparent;\n    border-bottom: 10px solid ${props => props.theme.secondary.dark};\n    content: \"\";\n  }\n  &::after {\n    position: absolute;\n    top: -19px;\n    right: 10%;\n    width: 0;\n    height: 0;\n    border-top: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-left: 10px solid transparent;\n    border-bottom: 10px solid ${props => props.theme.secondary.light};\n    content: \"\";\n  }\n`;\n\nconst CloseButton = styled.div`\n  width: 15px;\n  height: 15px;\n  border-radius: 50%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: ${props => props.theme.secondary.dark};\n  cursor: pointer;\n  transition: ${props => props.theme.all.mainTransition};\n  position: absolute;\n  right: 2px;\n  top: 2px;\n  border: solid 1px ${props => props.theme.secondary.dark};\n  &:hover {\n    background: ${props => props.theme.secondary.dark};\n    color: ${props => props.theme.secondary.light};\n  }\n`;\n\nconst Settings: React.FC<StyledProps> = ({ className }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className={className}>\n      <MenuIcon>\n        <MdMoreVert onClick={() => setIsOpen(!isOpen)} />\n      </MenuIcon>\n      {isOpen ? (\n        <FullMenu>\n          <CloseButton onClick={() => setIsOpen(!isOpen)}>x</CloseButton>\n          <ModeSwitcher />\n          <DifficultySwitcher />\n        </FullMenu>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default styled(Settings)`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex: 1;\n`;\n","import React from \"react\";\n\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport logo from \"../../images/logo.png\";\nimport Settings from \"../Settings/settings\";\n\nconst ThemedHeader = styled.header`\n  background: ${props => props.theme.primary.light};\n  color: ${props => props.theme.primary.text};\n  padding: 4px;\n  display: flex;\n  flex-direction: row;\n`;\n\nconst Header: React.FC<StyledProps> = ({ className }) => {\n  return (\n    <ThemedHeader className={className}>\n      <div className=\"left\">\n        <img src={logo} alt=\"Trivia Quest Logo\" className=\"logo\" />\n      </div>\n      <Settings />\n    </ThemedHeader>\n  );\n};\n\nexport default styled(Header)`\n  .logo {\n    object-fit: contain;\n    width: 100%;\n  }\n\n  .left {\n    flex: 5;\n  }\n`;\n","import React from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\n\nconst ThemedFooter = styled.footer`\n  background: ${props => props.theme.primary.dark};\n  padding: 4px;\n  color: ${props => props.theme.primary.light};\n`;\n\nconst Footer: React.FC<StyledProps> = ({ className }) => {\n  return (\n    <ThemedFooter className={className}>&copy; Vincent Ramdhanie</ThemedFooter>\n  );\n};\n\nexport default styled(Footer)`\n  font-size: 0.8rem;\n`;\n","import React from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport { Link } from \"react-router-dom\";\nimport { WhiteButton } from \"../../common/buttons\";\n\nconst ThemedSection = styled.section`\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\nconst BannerStatement = styled.h3`\n  text-shadow: 2px 2px 3px ${props => props.theme.primary.dark};\n  color: ${props => props.theme.secondary.main};\n`;\n\nconst Home: React.FC<StyledProps> = ({ className }) => {\n  return (\n    <ThemedSection className={className}>\n      <BannerStatement>Welcome to Trivia Quest!</BannerStatement>\n\n      <div className=\"home_message\">\n        You will be presented with 10 True or False questions.\n      </div>\n\n      <div className=\"callout\">Can you score 100%?</div>\n\n      <Link to=\"/quiz\" className=\"action\">\n        <WhiteButton>BEGIN</WhiteButton>\n      </Link>\n    </ThemedSection>\n  );\n};\n\nexport default styled(Home)`\n  .home_message {\n    width: 80%;\n    margin: 0 auto;\n  }\n\n  .action {\n    text-decoration: none;\n    color: inherit;\n    margin: 0 auto;\n  }\n`;\n","import React, { useState, useEffect } from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport { Question as QuestionInterface } from \"../../store/quiz/types\";\nimport { connect } from \"react-redux\";\nimport { addAnswer, incrementCurrent } from \"../../store/quiz/actions\";\nimport { useHistory } from \"react-router-dom\";\nimport { AppState } from \"../../store\";\n\ninterface QuestionProps extends StyledProps {\n  question: QuestionInterface;\n  addAnswer: typeof addAnswer;\n  incrementCurrent: typeof incrementCurrent;\n  currentQuestion: number;\n  maxQuestions: number;\n}\n\nconst QuestionContainer = styled.div`\n  grid-area: q;\n`;\n\nconst CategoryDiv = styled.div`\n  font-weight: normal;\n  font-size: 1rem;\n  color: ${props => props.theme.primary.dark};\n`;\n\nconst QuestionDiv = styled.div`\n  font-size: calc(10px + 2vmin);\n  color: ${props => props.theme.primary.dark};\n  text-shadow: 0 0 4px ${props => props.theme.secondary.light};\n  font-weight: bold;\n`;\n\ninterface BooleanButtonProps {\n  disabled: boolean;\n}\n\nconst BooleanButton = styled.div<BooleanButtonProps>`\n  background: ${props => props.theme.secondary.light};\n  color: ${props => props.theme.secondary.dark};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 90%;\n  margin: 0 auto;\n  border-radius: 4px;\n  font-weight: bold;\n  transition: ${props => props.theme.all.mainTransition};\n  cursor: pointer;\n  &:hover {\n    border: solid 1px ${props => props.theme.secondary.light};\n    background: transparent;\n    color: ${props => props.theme.secondary.light};\n  }\n`;\n\nconst Question: React.FC<QuestionProps> = ({\n  className,\n  question,\n  addAnswer,\n  incrementCurrent,\n  currentQuestion,\n  maxQuestions\n}) => {\n  const [answered, setAnswered] = useState(false);\n  const history = useHistory();\n\n  useEffect(() => {\n    setAnswered(false);\n  }, [answered]);\n\n  const checkAnswer = (ans: boolean) => {\n    if (!answered) {\n      setAnswered(true);\n      addAnswer(ans);\n      incrementCurrent();\n      if (currentQuestion === maxQuestions - 1) {\n        history.push(\"/score\");\n      }\n    }\n  };\n\n  return (\n    <div className={className}>\n      {question ? (\n        <>\n          <QuestionContainer>\n            <CategoryDiv>{question.category}</CategoryDiv>\n            <QuestionDiv\n              dangerouslySetInnerHTML={{ __html: question.question }}\n            ></QuestionDiv>\n          </QuestionContainer>\n          <BooleanButton\n            className=\"trueBtn\"\n            onClick={() => checkAnswer(true)}\n            disabled={answered}\n          >\n            True\n          </BooleanButton>\n          <BooleanButton\n            className=\"falseBtn\"\n            onClick={() => checkAnswer(false)}\n            disabled={answered}\n          >\n            False\n          </BooleanButton>\n        </>\n      ) : (\n        \"Please wait ...\"\n      )}\n    </div>\n  );\n};\n\nexport const StyledQuestion = styled(Question)`\n  display: grid;\n  grid-template:\n    \"q q\"\n    \"t f\";\n  height: 50%;\n  width: 90%;\n\n  .trueBtn {\n    grid-area: t;\n  }\n\n  .falseBtn {\n    grid-area: f;\n  }\n`;\n\nconst mapStateToProps = (state: AppState) => ({\n  currentQuestion: state.quiz.currentQuestion,\n  maxQuestions: state.quiz.maxQuestions\n});\n\nexport default connect(mapStateToProps, { addAnswer, incrementCurrent })(\n  StyledQuestion\n);\n","import React, { useEffect } from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport Question from \"../Question/question\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store\";\nimport { Question as QuestionInterface } from \"../../store/quiz/types\";\nimport { FaSpinner } from \"react-icons/fa\";\nimport { fetchQuestions } from \"../../store/quiz/actions\";\n\nconst ThemedSection = styled.section`\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst QuestionNumber = styled.h2`\n  color: ${props => props.theme.primary.dark};\n  text-shadow: 1px 1px 4px ${props => props.theme.primary.light};\n`;\n\nconst DiffDiv = styled.div`\n  text-transform: uppercase;\n  opacity: 0.6;\n  color: ${props => props.theme.secondary.dark};\n  font-size: 1.2rem;\n  position: absolute;\n  right: 10%;\n  top: 5%;\n`;\n\ninterface ProgressProps {\n  readonly completed: number;\n}\n\nconst ProgressBar = styled.div<ProgressProps>`\n  background: linear-gradient(\n    to right,\n    ${props => props.theme.secondary.dark} ${props => props.completed}%,\n    ${props => props.theme.secondary.light} ${props => props.completed}%\n  );\n  height: 15px;\n  width: 90%;\n  margin: 0 auto;\n  margin-top: 20px;\n  font-size: 0.8rem;\n  border-radius: 5px;\n`;\n\ninterface QuizProps extends StyledProps {\n  loading: boolean;\n  questions: QuestionInterface[];\n  fetchQuestions: typeof fetchQuestions;\n  currentQuestion: number;\n  maxQuestions: number;\n  difficulty: string;\n}\n\nconst Quiz: React.FC<QuizProps> = ({\n  className,\n  loading,\n  questions,\n  fetchQuestions,\n  currentQuestion,\n  maxQuestions,\n  difficulty\n}) => {\n  useEffect(() => {\n    if (!loading && questions.length === 0) {\n      fetchQuestions();\n    }\n  });\n\n  return (\n    <ThemedSection className={className}>\n      {loading ? (\n        <FaSpinner className=\"icon-spin\" />\n      ) : (\n        <>\n          <DiffDiv>{difficulty}</DiffDiv>\n          <QuestionNumber>Question {currentQuestion + 1}</QuestionNumber>\n          <Question question={questions[currentQuestion]} />\n          <ProgressBar completed={(currentQuestion / maxQuestions) * 100}>\n            {currentQuestion} of {maxQuestions} completed\n          </ProgressBar>\n        </>\n      )}\n    </ThemedSection>\n  );\n};\n\nexport const StyledQuiz = styled(Quiz)`\n  .icon-spin {\n    font-size: 4rem;\n    -webkit-animation: icon-spin 2s infinite linear;\n    animation: icon-spin 2s infinite linear;\n  }\n\n  @-webkit-keyframes icon-spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(359deg);\n      transform: rotate(359deg);\n    }\n  }\n\n  @keyframes icon-spin {\n    0% {\n      -webkit-transform: rotate(0deg);\n      transform: rotate(0deg);\n    }\n    100% {\n      -webkit-transform: rotate(359deg);\n      transform: rotate(359deg);\n    }\n  }\n`;\n\nconst mapStateToProps = (state: AppState) => ({\n  loading: state.quiz.loading,\n  questions: state.quiz.questions,\n  currentQuestion: state.quiz.currentQuestion,\n  maxQuestions: state.quiz.maxQuestions,\n  difficulty: state.quiz.difficulty\n});\n\nexport default connect(mapStateToProps, { fetchQuestions })(StyledQuiz);\n","import React from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport { FaPlus, FaMinus } from \"react-icons/fa\";\n\ninterface ResultProps extends StyledProps {\n  question: string;\n  correctAnswer: boolean;\n  givenAnswer: boolean;\n}\n\nconst Result: React.FC<ResultProps> = ({\n  className,\n  question,\n  correctAnswer,\n  givenAnswer\n}) => {\n  const correct = correctAnswer === givenAnswer;\n\n  return (\n    <div className={className}>\n      <div className={correct ? \"correct wrapper\" : \"wrong wrapper\"}>\n        <div className=\"icon\">{correct ? <FaPlus /> : <FaMinus />}</div>\n        <div className=\"response\">\n          <div\n            className=\"text\"\n            dangerouslySetInnerHTML={{ __html: question }}\n          ></div>\n          <div className=\"note\">\n            Correct answer: {correctAnswer.toString()}; You said:{\" \"}\n            {givenAnswer.toString()}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default styled(Result)`\n  width: 80%;\n  margin: 10px auto;\n\n  .wrapper {\n    display: flex;\n    padding: 12px;\n    border-radius: 5px;\n  }\n\n  .icon {\n    flex: 1;\n  }\n\n  .response {\n    flex: 4;\n  }\n\n  .text {\n    font-size: 1rem;\n    font-weight: bold;\n  }\n\n  .note {\n    font-size: 0.8rem;\n    font-weight: normal;\n  }\n\n  .wrong {\n    color: #d8000c;\n    background-color: #ffd2d2;\n  }\n\n  .correct {\n    color: #4f8a10;\n    background-color: #dff2bf;\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { styled } from \"../../styles/themes\";\nimport { StyledProps } from \"../../utils/interfaces\";\nimport { PrimaryButton } from \"../../common/buttons\";\nimport { Question as QuestionInterface } from \"../../store/quiz/types\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store\";\nimport Result from \"../Result/result\";\nimport { clearQuestions } from \"../../store/quiz/actions\";\nimport { useHistory } from \"react-router\";\n\nconst ThemedSection = styled.section`\n  width: 100%;\n  height: 100%;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n`;\n\ninterface ScoreProps extends StyledProps {\n  questions: QuestionInterface[];\n  answers: boolean[];\n  maxQuestions: number;\n  clearQuestions: typeof clearQuestions;\n}\n\nconst Score: React.FC<ScoreProps> = ({\n  className,\n  questions,\n  answers,\n  maxQuestions,\n  clearQuestions\n}) => {\n  const [total, setTotal] = useState(0);\n  const history = useHistory();\n  useEffect(() => {\n    const right = questions\n      .map(\n        (question, index) =>\n          question.correct_answer.toLowerCase() === answers[index].toString()\n      )\n      .filter(ans => ans).length;\n    setTotal(right);\n  }, [total, questions, answers]);\n\n  const resetQuiz = () => {\n    clearQuestions();\n    history.push(\"/\");\n  };\n\n  return (\n    <ThemedSection className={className}>\n      <div>\n        You Scored {total}/{maxQuestions}\n      </div>\n      <div>\n        {questions.map((question, index) => (\n          <Result\n            question={question.question}\n            correctAnswer={question.correct_answer === \"True\"}\n            givenAnswer={answers[index]}\n            key={index}\n          />\n        ))}\n      </div>\n      <div className=\"action\">\n        <PrimaryButton onClick={() => resetQuiz()}>Play Again?</PrimaryButton>\n      </div>\n    </ThemedSection>\n  );\n};\n\nexport const StyledScore = styled(Score)``;\n\nconst mapStateToProps = (state: AppState) => ({\n  questions: state.quiz.questions,\n  answers: state.quiz.answers,\n  maxQuestions: state.quiz.maxQuestions\n});\n\nexport default connect(mapStateToProps, { clearQuestions })(StyledScore);\n","import React from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { AppProps } from \"../../utils/interfaces\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport ControlledRoute from \"../../utils/ControlledRoute/controlledRoute\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../store\";\nimport { Mode } from \"../../store/system/types\";\nimport { lightTheme, darkTheme } from \"../../styles/themes\";\nimport Header from \"../Header/header\";\nimport Footer from \"../Footer/footer\";\nimport Home from \"../Home/home\";\nimport Quiz from \"../Quiz/quiz\";\nimport Score from \"../Score/score\";\n\nconst ThemedMain = styled.main`\n  flex: 1;\n  background-color: ${props => props.theme.primary.main};\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: ${props => props.theme.primary.text};\n  position: relative;\n`;\n\nconst App: React.FC<AppProps> = ({ className, mode }) => {\n  return (\n    <ThemeProvider theme={mode === Mode.LIGHT ? lightTheme : darkTheme}>\n      <div className={className}>\n        <Header />\n        <ThemedMain>\n          <Router>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/settings\">\n              <p>Settings</p>\n            </Route>\n            <Route path=\"/quiz\">\n              <Quiz />\n            </Route>\n            <ControlledRoute path=\"/score\">\n              <Score />\n            </ControlledRoute>\n          </Router>\n        </ThemedMain>\n        <Footer />\n      </div>\n    </ThemeProvider>\n  );\n};\n\nexport const StyledApp = styled(App)`\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n\n  @media screen and (min-width: 690px) {\n    width: 690px;\n    margin: 0 auto;\n  }\n`;\n\nconst mapStateToProps = (state: AppState) => ({\n  mode: state.system.mode\n});\n\nexport default connect(mapStateToProps)(StyledApp);\n","import {\n  PHASE_TRANSITION,\n  CHANGE_MODE,\n  SystemState,\n  SystemActionTypes,\n  Phase,\n  Mode\n} from \"./types\";\n\nconst initialState: SystemState = {\n  phase: Phase.NEW,\n  mode: Mode.LIGHT\n};\n\nexport function systemReducer(\n  state = initialState,\n  action: SystemActionTypes\n): SystemState {\n  switch (action.type) {\n    case PHASE_TRANSITION: {\n      return {\n        ...state,\n        ...action.payload\n      };\n    }\n    case CHANGE_MODE: {\n      return {\n        ...state,\n        mode: state.mode === Mode.LIGHT ? Mode.DARK : Mode.LIGHT\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import {\n  QuestionState,\n  SET_QUESTIONS,\n  UPDATE_DIFFICULTY,\n  UPDATE_SCORE,\n  QuizActionTypes,\n  FETCH_QUESTIONS,\n  CLEAR_QUESTIONS,\n  INCREMENT_CURRENT,\n  ADD_ANSWER\n} from \"./types\";\n\nconst initialState: QuestionState = {\n  questions: [],\n  answers: [],\n  difficulty: \"easy\",\n  score: 0,\n  loading: false,\n  currentQuestion: 0,\n  maxQuestions: 10\n};\n\nexport function quizReducer(state = initialState, action: QuizActionTypes) {\n  switch (action.type) {\n    case FETCH_QUESTIONS:\n      return {\n        ...state,\n        loading: true\n      };\n    case SET_QUESTIONS:\n      return {\n        ...state,\n        questions: action.payload,\n        loading: false\n      };\n    case CLEAR_QUESTIONS:\n      return {\n        ...state,\n        questions: [],\n        currentQuestion: 0,\n        answers: []\n      };\n    case UPDATE_DIFFICULTY:\n      return {\n        ...state,\n        difficulty: action.payload\n      };\n    case UPDATE_SCORE:\n      return {\n        ...state,\n        score: action.payload\n      };\n    case INCREMENT_CURRENT:\n      return {\n        ...state,\n        currentQuestion:\n          state.maxQuestions === state.currentQuestion + 1\n            ? state.currentQuestion\n            : state.currentQuestion + 1\n      };\n    case ADD_ANSWER:\n      return {\n        ...state,\n        answers: [...state.answers, action.payload]\n      };\n    default:\n      return state;\n  }\n}\n","import { put, takeLatest, all, select } from \"redux-saga/effects\";\nimport { SET_QUESTIONS, FETCH_QUESTIONS } from \"../quiz/types\";\n\nfunction* fetchQuestions() {\n  const difficulty = yield select(state => state.quiz.difficulty);\n  const maxQuestions = yield select(state => state.quiz.maxQuestions);\n  const json = yield fetch(\n    `https://opentdb.com/api.php?amount=${maxQuestions}&difficulty=${difficulty}&type=boolean`\n  ).then(response => response.json());\n\n  yield put({ type: SET_QUESTIONS, payload: json.results });\n}\n\nfunction* actionWatcher() {\n  yield takeLatest(FETCH_QUESTIONS, fetchQuestions);\n}\n\nexport default function* rootSaga() {\n  yield all([actionWatcher()]);\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { systemReducer } from \"./system/reducers\";\nimport { quizReducer } from \"./quiz/reducers\";\nimport rootSaga from \"./sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  system: systemReducer,\n  quiz: quizReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore() {\n  const middlewares = [sagaMiddleware];\n  const middleWareEnhancer = applyMiddleware(...middlewares);\n\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(middleWareEnhancer)\n  );\n\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App/app\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}